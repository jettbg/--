10 字符串 
字符串可不仅仅是一对引号的事，它的功能是很强大的。字符串的根本是序列，像元组那样
不可变的序列，例如：
x='12321'
 
既然是序列就可以使用切片的方法。这样就可以不用考虑数字的各个位要如何去拆解和翻转，
使用字符串就可以一步到位的实现。 
字符串的方法特别多，一共有46个之多，调用字符串的这些内部方法，至少有两个好处：1.
更快，2.更安全。快是因为这些方法都封装在内部，是用实现效率更高的 C 语言来编写的，更安
全是因为毕竟是官方编写的。 
10.1 大小写字母换来换去 
capitalize()    casefold()    title()    swapcase()    upper()    lower()     
capitalize()这个方法是将字符串的首字母变成大写，其它字母变成小写，注意使用该方法后
返回的不是源字符串，因为之前说过字符串是不可变的对象，所以呢它只是按照这个规则来形成
一个新的字符串。casefold()是返回一个所有字母都是小写的新字符串。title()会将字符串的每个单
词的首字母都变成大写，该单词的所有其它字母都变成小字母。swapcase() 会将字符串中的所有
字母大小写翻转。upper()是将所有的字母都变成大写。lower()是将所有的字母都变成小写。
lower()与casefold()是有区别的，lower()只能处理英文字符，而casefold()除了可以处理英文之外，
还可以处理其它字符例如德语等。 
10.2 左中右对齐 
center(width, fillchar=’’)    ljust(width, fillchar=’’)     
rjust(width, fillchar=’’)   
  zfill(width) 
这四个方法都有一个 width 参数，用来指定整个字符串的宽度，如果说指定的宽度小于或者
等于源字符串那就别提什么对齐了，直接源字符串输出就得了。 
center(width, fillchar=’’)按照你给的宽度把源字符串放在中间，居中对齐，左右两侧默认用空
格填充。ljust(width, fillchar=’’)实现的是左对齐，rjust(width, fillchar=’’)实现的是右对齐，同样
剩余的宽度，默认用空格去填充。zfill(width)比较特殊，它是右对齐，左侧填充0，这个在做数据
报表的时候会比较实用，对于数字而言它也可以机智的处理带负号的数字。左中右对齐的方法还
支持一个叫fillchar的参数，它的默认值是空格，你不去设置它，就会用空格去填充，同样也可以
给它填充想添加的字符,不过只能填充一个字符。 
45 
10.3 查找 
count(sub[,start[,end]])    find(sub[,start[,end]])    rfind(sub[,start[,end]]) 
index(sub[,start[,end]])   rindex(sub[,start[,end]]) 
count 方法用于找出sub参数指定的子字符串在字符串中出现的次数，start和end用于查找指
定的起始和结束位置，位置是各个字符对应的数字位置下标索引值，下标的标记方法和列表一样。
find 和 rfind 的作用是查找sub参数所指定的子字符串所对应的下标索引值，它们的区别是前置是
从左往右找，后者是从右往左找，若查找的子字符串比较多的话，默认只查找第一个对应的下标
索引值。index 和 rindex 这两个方法和 find 的两个方法是很相似的，它们的区别是如果定位不到
子字符串，它们的处理方式是不一样的，find和rfind找不到的话它返回的是-1，index它找不到的
话是会抛出异常的。
10.4 替换 
expandtabs（[tabsize=8]）    replace(old,new,count=-1)    translate(table) 
expandtabs 这个方法是使用空格来代替换制表符，并且呢返回一个新的字符，在写代码时是
用tab制表符好（tab在python代码中相当于8个空格，在word；里相当于4个空格）还是使用空
格来代替比较好呢？这个其实一直以来都有争论。实际情况是使用空格的比例是多数的，尤其是
python，小甲鱼建议使用空格喔，其实无论怎么选择都可以，但千万不要做的事情是在一段代码
46 
里面混合使用Tab和空格，这是最让人揪心和头疼的： 
上一页的那段代码的意思是，有一段代码code（这段代码也相当于一大串字符串），代码里既
有Tab缩进也有使用四个空格缩进（英文前面的是Tab这里是相当于8个空格），此外注意使用”””
即三个引号时可以换行写这一段字符串。这时候使用 expandtabs就可以将字符串中的 Tab全部替
换成空格，（）里的参数是指定一个Tab等于多少个空格。 
replace 是将 old参数指定的旧字符串替换成new参数指定的新字符串，count参数指定的是替
换的次数，count的默认值是-1，也就是说你不设置这个参数的话，它就相当于全部替换： 
translate(table)这个方法是返回一个根据 table 参数转换后的新字符串，table 在这里是表格的
意思，由于指定一个转换规则的表格，那么这个转换规则的表格是如何得到的？怎么生成的呢？
这个时候呢，需要用到一个str.maketrans(x[,y[,z]]): 
str.maketransz()这是属于字符串的一个静态方法，之后会详细介绍。我们建立一个表格将
“ABCDEFG”替换成“1234567”，然后把这个表格放到到一个变量名中去，给它起名 table，之
后直接把这个变量给到 translate()里面的参数。也可以不用赋值给一个变量名直接把这个转换规则
放到 translate()的参数里边，此外这个 str.maketransz()方法还支持第三个参数，表示将指定的字符
串给忽略： 
10.5 判断和检测 
这里面一共14种方法，都是对应字符串各种情况下的判断和检测，所以返回的都是布尔类型
的值，要么就是true，要么就是false。 
47 
startswith(prefix[,start[,rnd]])这个方法用来判断这个参数指定的子字符串是否出现在字符串
的起始位置。endswith(suffix[,start[,end]])这个方法用来判断参数指定的子字符串是否出现在字符
串末尾的地方。这两个方法里都有方括号里面写着 start 和 end，这个方括号说明这是一个可选参
数，它就相当于这个函数或者方法的一个高级定制版本，我们如果给它赋值的话它会有新的特性
出现。 
此外方括号里面的参数其实是支持以元组的形式传入多个待匹配的字符串的： 
这里边“你”“我”“她”里的“她”是匹配成功的，也就是说这个元组可以提供任何你觉得
有可能匹配成功的元素进去，只要有一个匹配成功那么它就返回 True，这里注意 startswith 后要
有两个括号。 
istitle()可以判断一个字符串中所有单词是否都是以大写字母开头，其余字母均为小写，
isupper()方法可以判断一个字符串中是否所有的字母都是大写，相反 islower()判断一个字符串中
是否全部为小写。 
在一个语句中连续调用两个方法，Python会从左往右依次进行调用： 
isalpha()方法可以用来判断字符串中是否只有字母构成，注意空格不是字母哦。isspace()可以
用来判断是否是空白字符串，注意并不是只有空格是空白字符串Tab以及转义字符\n等也都是空
白字符。isprintable()可以用来判断一个字符串中是否所有字符都是可打印的，注意转义字符\n 不
是一个可打印字符。 
isdecimal()，isdigit()，isnumeric()这几个方法都是用来判断数字的。isdecimal()用来判断是否
只包含十进制字符，例如2²就不行。isdigit()可以用来判断是否是数字，其它进制的数字也可以，
例如 2²的返回值就是 True，但是罗马数字、汉字的数字就不行了。而这些罗马数字、汉字用
48 
isnumeric()方法的返回值就是True了。 
isalnum()是一个集大成者，只要 isalpha()、isdecimal()，isdigit()，isnumeric()任意一个返回值
是True 它的返回值就是 True。isidentifier()用来判断字符串是否是一个 Python 合法的标识符，比
如之前讲过变量名必须得是一个合法的标识符： 
这里还有一个教科书不会讲的小技巧：如果你想判断一个字符串是否为Python的保留标识符，
就像 if、while，for 啊这些关键字，那么我们可以使用 keyword 模块的 iskeyword 函数来进行实
现，首先我们要使用一个模块里面的函数的话，需要把这个模块导入（现在还不知道模块和函数
的具体概念，之后会讲到）此处依葫芦画瓢： 
keywore.iskeyword()的意思是说调用 keyword模块里的iskeyword函数。 
10.6 截取 
strip(chars=None)    lstrip(chars=None)    rstrip(chars=None) 
removeprefix(prefix)    removesuffix(suffix) 
截取字符：lstrip()会去除左侧的空白，rstrip()会去除右侧的空白，strip()会去除左右两侧的
空白。这三个方法都有一个 chars 的参数，这个参数的默认值是 None在 python也就是没有的意
思，这里空白/空格的意思，所以就会去除特定位置的空格了，这个参数也可以传入一个字符串，
lstrip 就会去除左侧含有该字符串中还有的字符： 
注意 chars 这个参数要用字符串所以括号里需要加引号，而且是按照字符为单位，例子
lstrip(wcomf.)字符串中有六个字符，所以就会从左侧开始找有没有这个字符，直到不含有这个六
字符的位置，把左侧含有这些字符的部分给去除掉。 
此外你还可以踢掉一个具体的字符串而不以字符为单位，这里需要用到 removeprefix(prefix)
和removesuffix(suffix)这两个方法，prefix就是前缀的意思，suffix是后缀的意思： 
49 
10.7 拆分和拼接 
拆分字符串：partition(sep)和 rpartition(sep)这两个方法就是将字符串以参数指定的分隔符为
依据进行切割，然后将切割后的结果返回一个三元组（三个元素的元组）： 
partion()就是将指定的参数作为分割符（若该参数在字符串有多个位置，选取从左往右的第
一个位置作为分隔符）， 分隔符左侧为该三元组的的第一个元素，分隔符自身为第二个元素，分隔
符后边的为第三个元素。 
rpartition()与 partition()相反，事从右往左找分隔符。 
除了切成三块外，也可以根据分隔符将字符串切成一小块一小块，这是可以用split()和rsplit()
方法。它们的定义是：split(sep=None,maxsplit=-1)、rsplit(sep=None,maxsplit=-1)。同样加 r 的代表
从右往左找分隔符，这里有两个带有默认值的参数 sep 表示分割符，不定义时默认为空格，
maxplit 表示分割的次数-1表示看到分割符就切，若是1的话就表示切一次： 
注意区分中英文的逗号，且split切出来的是数列。 
当把换行符作为分隔符时，要注意不同操作系统的换行符的表示方法是可能不一样的，引发
过战争，比如：Linux系统是\n，Mac系统下是\r，Windows 则是\r\n，此外还有很多其它的表示
方法，所以在根据分隔符切割时就可能会出现多种情况，这时候可以引出
aplitlines(keepends=False)这个方法，这个方法是按行进行分析，将结果以列表的形式返回，这个
方法里边的keepends参数是指定结果是否要包含这个换行符，如果是True就是包含换行符，且将
换行符包含到上一个元素里去，默认是不包含换行符。 
最后就是拼接，join(iterable)是关于字符串拼接的，这种方法初学者用起来会有些难受，但
在实际开发中却受到大神的追捧： 
join 前面的字符串是作为分隔符来用的，它的参数是一个可迭代对象，可以用列表将待拼接
的字符串给包裹起来，元组也当然可以将带拼接的字符（串）包裹起来。这个join()方法也可以用
于字符串拼接： 
50 
join 前面的可以是空格，这里加号拼接似乎比join()方法拼接简介许多，如果分别将1w，10w，
100w，1000w 以及 1 个亿个 FishC 字符串拼接起来，数量越多 join()方法的效率就越比加号有效
率，所以搞大数据的时候，应该选择join()方法。 
10.8 格式化字符串 
什么是格式化字符串呢？ 
想将year等于2010插入到字符串中直接写进字符串中肯定是不行的，引号里面只是字符串而
不是变量名，这时候可以使用英文大括号，再使用format()方法就可以将2010插入进去了。 
在字符串中格式化字符串的套路也发现了，它就是使用一对花括号来表示替换字段，也就是
说用花括号在原字符串中占一个坑位的意思，真正的内容是放在format()方法的参数中例如： 
注意 python 中次方用的不是^而是**。上面的参数在填充到字符串里时默认的是从左到右的
顺序，不过这些参数都是有索引值的，从 0 开始和列表一样，直接将对应元素的索引值放到花括
号里边就可以定位索引，此外同一个索引值也是可以被引用多次的： 
除了索引值进行索引，format()方法也可以通过关键字精确索引： 
注意虽然关键字和索引值都可以索引，但要把索引值的参数放在前面，关键字放在后面，且
关键字没有下标索引值。 
在格式化字符串中花括号的作用是占位的，那么要单纯的输入一对花括号的话可以直接在参
数里直接写上花括号，因为花括号也是一个字符串，此外还可以使用花括号来注释花括号（即在
花括号里写入花括号）： 
51 
下面是字符串格式化的语法，比较长，且看上去比较复杂，但没关系可以一个一个击破： 
不要在意代码这么长怎么记住，用的多了自然就记住了。 
先从[align]开始，align指的是对齐的方式，align一共有四种对齐方式： 
第一个没有展现出什么对齐效果，是因为本来要被插入的字符串的空间不大，这时候可以引
入[width]这个选项，可以来指定更大的宽度，就比如上图第二个语法写的那样，在[align]后直接
写上数字（这个数字就指的是该插入字符串的宽度，10就表示该宽度为10个字符），就可以了。
会发现花括号里多了个冒号，这个冒号是必须的，冒号的左边是位置或者关键字索引，右边才是
我们格式化选项： 
讲解一下第一个代码里的第一个花括号，1 表示第二个参数，该参数插入进去的时候是以右
对齐的方式，且插入的宽度为10个字符的宽度。冒号前面既可以用索引值来索引也可以用关键字
参数。[align]里边还有 0（表中没有写出），这个 0 是在指定宽度的前面添加的，它表示为数字类
型启用感知正负号的 0填充效果，这个意思也就是说，它只能感知数字，即参数为数字的时候才
可以起作用，除此之外它还能感知正负号，负号号也会占用一个字符的位置： 
52 
[fill]填充选项，可以指定填充的字符： 
使用[fill]选项也可以实现=填充0的效果.如上图所示。 
[sign]，符号项，这个选项仅对数字类型有效，它可以使用的值有以下三种可以使用： 
从这个语法可以看到使用加号它就会在正数前面添加一个加号，而使用负号时，它会且只会
在符号前加负号，负号在这里是个默认行为，加不加都可以。 
[grouping_option]是可以设置千分位分隔符的选项，它有两个值可以选择，一个是逗号一个是
下横线： 
当位数不够时将不会出现千分符。 
接下来讲精度选项[precision]，我们是需要填入一个十进制的整数，对于不同类型的参数它的
效果是不一样的： 
53 
[type]这个选项下面会讲到，先来举例： 
.2f 的意思是说保留两位小数，.2g 是一共几位小数，还有就是注意精度选项不允许运用到整
数上。 
最后一个[type]类型选项，这个选项决定了数据应当如何来呈现，那么我们对这些类型选项进
项了一个分类： 
看上面这个表格，这些是适用于整数的，比如说我们在类型的位置输入 b，那么我们传入的
一个十进制数就会以它的二进制的形式来输出： 
这里还有一个人性化的设置，就是那个[#]选项，这个#选项就是说，参数以二进制、八进制
或者十六进制在字符串输出的时候，它会自动来追加一个前缀： 
54 
它会在输出的数字前面加上符号来告诉你它是几进制的数字，其中 c不能使用，十进制时就
不加了前面的标志符了。 
除了整数，还有适用于浮点数和复数的类型选项： 
适用于浮点数和复数的类型选项又很多，这里输入一个整数也是可以的，只不过它会自动转
换为等值的浮点数来进行考虑，所以就将它们总结为适用于浮点数或者复数，举个例子： 
55 
e 和E的区别就是输出的时候，之前用的是e输出的时候用的也是e。定点小数法的意思是说，
小数点的位置是定的，以前在那就在那儿。g里面有分大数和小数的区别（小甲鱼没讲，只是举
了上边的例子，这里可是能是带小数的数为小数）。%还可以自己定义精度，使用精度选项来改一
下就可以了，比如例子中的加了个.2表示小数点后保留两位小数。 
更灵活的玩法，python其实支持通过关键字参数来设置选项的值： 
这里的关键字（自己写个变量名）要用花括号给括起来，同时设置多个关键字参数也是可以
的： 
10.9 f-字符串（f-string） 
这是一个新的语法，之所以叫这个名字是因为它的使用语法非常简单，只要在普通的字符串
前面加上一个 f-/F-作为一个前缀就可以了，f-string 可以看作是 format 语法的一个语法糖，它进
一步简化了格式化字符串的一个操作，并且带来性能上的略微提升。 
语法糖是一个计算机术语，是指计算机语言中添加的某种语法，这种语法对语言的功能没有
影响，但是更方便程序员使用，语法糖让程序更加简洁，有更高的可读性。我们拿前面的例子来
改写 ： 
它的操作就是将后面的format去掉，将你需要插入的参数直接写到花括号里，对于那个长的
语法，将需要处理的数字放到冒号前，同样去掉format即可。下面在介绍一个复杂一点的： 
56 
这样似乎用 format 其实更方便一些。虽然大多数情况下 f-字符串的写法会让人更加心旷神怡。
它的执行效率也比format效率略高一筹，但是要注意的是f-字符串是python3.6的产物，所以写的
代码可能会部署到该版本以下的机器的时候它是无法被识别的，所以在大多数情况下 format 方法
是更加适用的，当你去查看别人的开源代码的时候，你会发现 format 方法用的会更多，因为呢，
它们把代码开源出来，它们不知道执行这个代码的是 python3 点几的机器，所以呢它们就会选择
使用兼容性更高的format方法啦。